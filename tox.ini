[tox]
envlist = py27,pep8
minversion = 2.0
skipsdist = True

[testenv]
setenv = VIRTUAL_ENV={envdir}
passenv = TRACE_FAILONLY
usedevelop = True
install_command =
    pip install -U {opts} {packages}
deps = -r{toxinidir}/requirements.txt
       -r{toxinidir}/test-requirements.txt
       --editable=git+https://github.com/noah8713/neutron.git@stable/juno#egg=neutron
       --editable=git+https://github.com/noah8713/pip10-nap-1.1.0.git@master#egg=napalm
       --editable=git+https://github.com/noah8713/pip10-nap-base-0.21.0.git@master#egg=napalm_base
       --editable=git+https://github.com/noah8713/pip10-nap-eos-0.5.1.git@master#egg=napalm_eos
       --editable=git+https://github.com/noah8713/pip10-nap-junos-0.6.0.git@master#egg=napalm_junos
       --editable=git+https://github.com/noah8713/pip10-nap-nxos-0.5.0.git@master#egg=napalm_nxos

whitelist_externals = sh
commands =
  dsvm-functional: {toxinidir}/tools/deploy_rootwrap.sh {toxinidir} {envdir}/etc {envdir}/bin
  sh tools/pretty_tox.sh '{posargs}'
# there is also secret magic in pretty_tox.sh which lets you run in a fail only
# mode. To do this define the TRACE_FAILONLY environmental variable.


[testenv:api]
basepython = python2.7
passenv = {[testenv]passenv} TEMPEST_CONFIG_DIR
setenv = {[testenv]setenv}
         OS_TEST_PATH=./netforce/tests/api
         OS_TEST_API_WITH_REST=1

[testenv:common]
# Fake job to define environment variables shared between dsvm/non-dsvm jobs
setenv = N_TEST_TIMEOUT=180
commands = false

[testenv:debug]
commands = oslo_debug_helper -t netforce/tests {posargs}

[testenv:hashtest]
# This is the same as default environment, but with a random PYTHONHASHSEED.
# You can also specify a specific hashseed (for test repeatability) as follows:
#   tox --hashseed 1235130571 -e hashtest
setenv = VIRTUAL_ENV={envdir}

#[testenv:api]
#setenv = OS_TEST_PATH=./netforce/tests/api

[testenv:functional]
setenv = OS_TEST_PATH=./netforce/tests/functional
#setenv = OS_TEST_PATH=./netforce/tests/functional
#         OS_TEST_TIMEOUT=90
deps = {[testenv]deps}
#  -r{toxinidir}/neutron/tests/functional/requirements.txt

[testenv:dsvm-functional]
# setenv = OS_TEST_PATH=./netforce/tests/functional
#          OS_SUDO_TESTING=1
#          OS_ROOTWRAP_CMD=sudo {envbindir}/neutron-rootwrap {envdir}/etc/neutron/rootwrap.conf
#          OS_FAIL_ON_MISSING_DEPS=1
#          OS_TEST_TIMEOUT=90
sitepackages=True
deps = {[testenv:functional]deps}


[testenv:pep8]
basepython=python2.7
deps =
  {[testenv]deps}
commands=
  # If it is easier to add a check via a shell script, consider adding it in this file
  # Checks for coding and style guidelines
  sh ./tools/misc-sanity-checks.sh
  flake8
whitelist_externals =
  sh
  bash

[testenv:cover]
commands =
  python setup.py testr --coverage --testr-args='{posargs}'
  coverage report

[testenv:venv]
commands = {posargs}

[testenv:docs]
commands = sphinx-build -W -b html doc/source doc/build

[flake8]
# E125 continuation line does not distinguish itself from next logical line
# E126 continuation line over-indented for hanging indent
# E128 continuation line under-indented for visual indent
# E129 visually indented line with same indent as next logical line
# E265 block comment should start with ‘# ‘
# H305 imports not grouped correctly
# H404 multi line docstring should start with a summary
# H405 multi line docstring summary not separated with an empty line
# E211 whitespace before '['
# unused imports
ignore = E125,E126,E128,E129,E265,H305,H404,H405,E211,F401
show-source = true
builtins = _
# netforce/tests/tempest needs to be excluded so long as it continues
# to be copied directly from tempest, since tempest and neutron do not
# share a flake8 configuration.
exclude = ./.*,build,dist,

[hacking]
#import_exceptions = neutron.i18n
#local-check-factory = neutron.hacking.checks.factory

[testenv:genconfig]
commands = {toxinidir}/tools/generate_config_file_samples.sh

